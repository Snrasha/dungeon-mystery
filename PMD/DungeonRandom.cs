/// This file was generated by C# converter tool
/// Any changes made to this file manually will be lost next time the file is regenerated.

using System;
using System.Collections.Generic;

namespace PMD
{
    public class DungeonRandom
    {
        private const long LCG_MULTIPLIER = 0x5d588b65;
        private const long ADD_T1 = 0x269ec3;

        public DungeonRandom()
        {
            this.use_secondary = false;
            this.seq_num_primary = 0;
            this.preseed = 0;
            this.last_value_primary = 0;
            this.idx_secondary = 0;
            this.seeds_t1 = new List<long>(5);
            this.showDebug = false;
        }

        public bool use_secondary { get; set; }
        public double seq_num_primary { get; set; }
        public long preseed { get; set; }
        public long last_value_primary { get; set; }
        public int idx_secondary { get; set; }
        public List<long> seeds_t1 { get; set; }
        public bool showDebug { get; set; }

        public void SetShowDebug(bool showDebug)
        {
            this.showDebug = showDebug;
        }

        public void SetDungeonRngPreseed(int preseed)
        {
            this.preseed = preseed;
        }

        /// <summary>
        /// NA: 022EA980
        /// GenerateDungeonRngSeed - Seed for initializing the dungeon Primary RNG
        /// 
        /// Based on the preseed, performs two Primary LCG iterations
        /// Stores the second iteration as a new preseed, returns an RNG seed
        /// </summary>
        public double GenerateDungeonRngSeed()
        {
            long firstIter = (this.preseed * LCG_MULTIPLIER + 1);
            long secondIter = firstIter * LCG_MULTIPLIER + 1;
            this.preseed = secondIter;
            return (secondIter & 0xff0000) | ((firstIter >> 0x10) & 0xffff) | 1;
        }

        public void InitDungeonRng(int seed)
        {
            this.last_value_primary = seed | 1;
            this.seq_num_primary = 0;
            for (var i = 0; i < this.seeds_t1.Count; i++)
            {
                this.seeds_t1[i] = seed;
            }
        }

        /// <summary>
        /// NA: 022EAA20
        /// DungeonRand16Bit
        /// 
        /// returns: pseudorandom integer on the interval [0, 65535]
        /// </summary>
        public long Rand16Bit()
        {
            long result;
            if (!this.use_secondary)
            {
                this.seq_num_primary++;
                long intermediate = this.last_value_primary * LCG_MULTIPLIER + 1;
                result = intermediate & 0xffff0000;
                this.last_value_primary = intermediate;
            }
            else
            {
                result = LCG_MULTIPLIER * this.seeds_t1[this.idx_secondary] + ADD_T1;
                this.seeds_t1[this.idx_secondary] = result;
                result = result * 65536;
            }

            return result >> 16;
        }

        /// <summary>
        /// NA: 022EAA98
        /// DungeonRandInt
        /// 
        /// returns: pseudorandom integer on the interval [0, n - 1]
        /// </summary>
        public int RandInt(int n)
        {
            return UnityEngine.Random.Range(0,n);
        }

        /// <summary>
        /// NA: 022EAAC0
        /// DungeonRandRange
        /// 
        /// returns: pseudorandom integer on the interval [min(x, y), max(x, y) - 1]
        /// </summary>
        public int RandRange(int x, int y)
        {
            if (x < y)
            {
                return (int)Math.Floor(UnityEngine.Random.Range(0.0f,1.0f) * (y - x)) + x;
            }
            else
            {
                return (int)Math.Floor(UnityEngine.Random.Range(0.0f, 1.0f) * (x - y)) + y;
            }
        }

        /// <summary>
        /// NA: 022EAC5C
        /// DungeonRngSetSecondary - Sets the Dungeon PRNG to use one of the 5 secondary LCGs for random number generation.
        /// </summary>
        public void DungeonRngSetSecondary(int secondary_index)
        {
            this.use_secondary = true;
            this.idx_secondary = secondary_index;
        }
    }
}